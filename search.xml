<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>蘑菇丁分析</title>
      <link href="posts/3.html/"/>
      <url>posts/3.html/</url>
      
        <content type="html"><![CDATA[<h3 id="蘑菇丁分析"><a href="#蘑菇丁分析" class="headerlink" title="蘑菇丁分析"></a>蘑菇丁分析</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>我们每天要在 蘑菇丁APP上进行打卡这关系到我们是否能正常毕业 但是有的时候会忘记打卡 并且感觉这很麻烦 ！哎！苦恼</p></blockquote><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><h5 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h5><blockquote><p> 工具</p></blockquote><ul><li>HttpCanary 安卓抓包软件 <a href="https://share.weiyun.com/6u8nhuSi">https://share.weiyun.com/6u8nhuSi</a></li></ul><blockquote><p>开始</p></blockquote><h5 id="使用HttpCanary对蘑菇钉登录进行抓包"><a href="#使用HttpCanary对蘑菇钉登录进行抓包" class="headerlink" title="使用HttpCanary对蘑菇钉登录进行抓包"></a>使用HttpCanary对蘑菇钉登录进行抓包</h5><p>在结果中我们可以发现几个请求</p><ol><li><strong>第一个请求</strong>登录请求(<a href="https://api.moguding.net:9000/session/user/v1/login">https://api.moguding.net:9000/session/user/v1/login</a>) </li></ol><p>其中请求参数为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data &#x3D; &#123;</span><br><span class="line">             &quot;password&quot;: password,</span><br><span class="line">             &quot;loginType&quot;: &quot;android&quot;,</span><br><span class="line">             &quot;uuid&quot;: &quot;&quot;,</span><br><span class="line">             &quot;phone&quot;: phone</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>最后如果登录成功会返回你的以及你的一些信息例如token拿到了<em>token</em>就可以获取用户的身份信息</p><p><a href="https://imgchr.com/i/DAlabd"><img src="https://s3.ax1x.com/2020/11/16/DAlabd.gif" alt="DAlabd.gif"></a></p><ol start="2"><li><strong>第二个请求</strong>签到请求(<a href="https://api.moguding.net:9000/attendence/clock/v1/save">https://api.moguding.net:9000/attendence/clock/v1/save</a>)</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;country&quot;: &quot;&quot;,#国家</span><br><span class="line"> &quot;address&quot;: &quot;&quot;,#地址</span><br><span class="line"> &quot;province&quot;: &quot;&quot;,</span><br><span class="line"> &quot;city&quot;: &quot;&quot;,#城市</span><br><span class="line"> &quot;latitude&quot;: &quot;&quot;,#经度</span><br><span class="line"> &quot;description&quot;: &quot;&quot;,#描述</span><br><span class="line"> &quot;planId&quot;: &quot;&quot;,#planid</span><br><span class="line"> &quot;type&quot;: &quot;START&quot;,# START 上班 END 下班</span><br><span class="line"> &quot;device&quot;: &quot;Android&quot;,</span><br><span class="line"> &quot;longitude&quot;: &quot;&quot;#纬度</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/DAdW4g"><img src="https://s3.ax1x.com/2020/11/16/DAdW4g.gif" alt="DAdW4g.gif"></a></p><p>在这个请求中有一个参数为<strong>planid</strong> 在请求中也同样瞟到这个请求</p><ol start="3"><li><strong>第三个请求</strong>获取planid! (<a href="https://api.moguding.net:9000/practice/plan/v1/getPlanByStu">https://api.moguding.net:9000/practice/plan/v1/getPlanByStu</a>)</li></ol><p>请求参数为  这里会用到登录成功后得到的token</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">status:&quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应中可以看到<strong>planid</strong></p><p><img src="https://mogu.zhiqing.love/images/3.gif"></p><p>到这里一切就明了了!  一个简单的签到就可以实现了！</p><h5 id="开始实现-第一个想法是python写-感觉简单点"><a href="#开始实现-第一个想法是python写-感觉简单点" class="headerlink" title="开始实现(第一个想法是python写 感觉简单点)"></a>开始实现(第一个想法是python写 感觉简单点)</h5><p>思路！</p><ol><li>携带账号密码请求登录获得token值 </li><li>请求获取planid</li><li>携带签到参数进行签到</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置信息</span></span><br><span class="line">phone = <span class="string">&quot;&quot;</span>  <span class="comment"># 登录手机号</span></span><br><span class="line">password = <span class="string">&quot;&quot;</span>  <span class="comment"># 登录密码</span></span><br><span class="line">desc = <span class="string">&quot;&quot;</span>  <span class="comment"># 描述</span></span><br><span class="line">longitude = <span class="string">&quot;&quot;</span>  <span class="comment"># 经度</span></span><br><span class="line">latitude = <span class="string">&quot;&quot;</span>  <span class="comment"># 纬度</span></span><br><span class="line">address = <span class="string">&quot;&quot;</span>  <span class="comment"># 签到地点名</span></span><br><span class="line">stateType = <span class="string">&quot;START&quot;</span>  <span class="comment"># START 上班 END 下班</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#登录请求</span></span><br><span class="line">loginUrl = <span class="string">&quot;https://api.moguding.net:9000/session/user/v1/login&quot;</span></span><br><span class="line">saveUrl = <span class="string">&quot;https://api.moguding.net:9000/attendence/clock/v1/save&quot;</span></span><br><span class="line">planUrl = <span class="string">&quot;https://api.moguding.net:9000/practice/plan/v1/getPlanByStu&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#登录</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PostUrl</span>(<span class="params">self,url, headers, data</span>):</span></span><br><span class="line">        requests.packages.urllib3.disable_warnings()</span><br><span class="line">        resp = requests.post(url, headers=headers, data=json.dumps(data), verify=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> resp.json()</span><br><span class="line"><span class="comment">#登录获取token</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetToken</span>(<span class="params">self</span>):</span></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&quot;password&quot;</span>: password,</span><br><span class="line">            <span class="string">&quot;loginType&quot;</span>: <span class="string">&quot;android&quot;</span>,</span><br><span class="line">            <span class="string">&quot;uuid&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;phone&quot;</span>: phone</span><br><span class="line">        &#125;</span><br><span class="line">        resp = self.PostUrl(loginUrl, data=data, headers=&#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json; charset=UTF-8&quot;</span>,</span><br><span class="line">                                                     <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; U; Android 8.1.0; zh-cn; BLA-AL00 Build/HUAWEIBLA-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36&#x27;</span>&#125;)</span><br><span class="line">        <span class="keyword">return</span> resp[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;token&#x27;</span>]</span><br><span class="line"><span class="comment">#获取getPlanid</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetPlanId</span>(<span class="params">self,headers</span>):</span></span><br><span class="line">        data = &#123;<span class="string">&quot;state&quot;</span>: <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">        resp = self.PostUrl(planUrl, headers, data)</span><br><span class="line">        <span class="keyword">return</span> resp[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;planId&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    login = Login()</span><br><span class="line">    <span class="comment"># 执行签到操作</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json; charset=UTF-8&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; U; Android 8.1.0; zh-cn; BLA-AL00 Build/HUAWEIBLA-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;roleKey&#x27;</span>: <span class="string">&#x27;student&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Authorization&#x27;</span>: login.GetToken()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;device&#x27;</span>: <span class="string">&#x27;Android&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;address&#x27;</span>: address,</span><br><span class="line">            <span class="string">&#x27;description&#x27;</span>: desc,</span><br><span class="line">            <span class="string">&#x27;country&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;province&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;longitude&#x27;</span>: longitude,</span><br><span class="line">            <span class="string">&#x27;latitude&#x27;</span>: latitude,</span><br><span class="line">            <span class="string">&#x27;planId&#x27;</span>: login.GetPlanId(headers),</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>: stateType</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resp = login.PostUrl(saveUrl, headers, data)</span><br><span class="line">        print(resp)</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h5 id="想法"><a href="#想法" class="headerlink" title="想法!"></a>想法!</h5><p>登录已经实现 只要扔到服务器里设置定时任务就可以了!(定时签到 获取时间更改上班还是下班)！</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 范围时间</span></span><br><span class="line">d_time = datetime.datetime.strptime(<span class="built_in">str</span>(datetime.datetime.now().date())+<span class="string">&#x27;6:30&#x27;</span>, <span class="string">&#x27;%Y-%m-%d%H:%M&#x27;</span>)</span><br><span class="line">d_time1 =  datetime.datetime.strptime(<span class="built_in">str</span>(datetime.datetime.now().date())+<span class="string">&#x27;9:33&#x27;</span>, <span class="string">&#x27;%Y-%m-%d%H:%M&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 当前时间</span></span><br><span class="line">n_time = datetime.datetime.now()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 判断当前时间是否在范围时间内</span></span><br><span class="line"><span class="keyword">if</span> n_time &gt; d_time <span class="keyword">and</span> n_time&lt;d_time1:</span><br><span class="line">a=<span class="string">&quot;START&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">a=<span class="string">&quot;END&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 蘑菇丁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Gitee免费搭建一个小小的图床</title>
      <link href="posts/2.html/"/>
      <url>posts/2.html/</url>
      
        <content type="html"><![CDATA[<p>图床</p><blockquote><p>何为图床</p></blockquote><p>图床一般是指储存图片的服务器</p><p>解决的问题：</p><ul><li>Hexo写文章中的图片</li><li>私人小图床</li><li>…</li></ul><h3 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>选择gitee（因为码云是国内仓库。所以访问速度要比github快）</li><li>PicGO</li></ul><h4 id="注册配置Gitee"><a href="#注册配置Gitee" class="headerlink" title="注册配置Gitee"></a>注册配置Gitee</h4><h5 id="注册登录Gitee"><a href="#注册登录Gitee" class="headerlink" title="注册登录Gitee"></a>注册登录Gitee</h5><blockquote><p>地址 <a href="https://gitee.com/">https://gitee.com/</a></p></blockquote><h5 id="Gitee创建库"><a href="#Gitee创建库" class="headerlink" title="Gitee创建库"></a>Gitee创建库</h5><ol><li>新建库</li><li>填写对应信息(公开和readme文件要选中)</li><li>创建库生成私人令牌</li></ol><p><img src="https://gitee.com/executeing/tuchuang/raw/master/20201029150713.png"></p><ol start="4"><li><p>生成私人令牌</p><ol><li>点击右上角个人头像，进入<strong>设置</strong></li><li>找到左边<strong>安全设置</strong>下的<strong>私人令牌</strong>选项，</li><li>点击页面右上方的<strong>生成新令牌</strong></li><li>填写描述并勾选如图所示的<strong>user_info</strong>和<strong>project</strong>两项</li><li>最后生成的token(配置PicGo)会用到</li></ol><p><img src="https://gitee.com/executeing/tuchuang/raw/master/20201029150941.png"></p></li></ol><h3 id="下载配置PicGo"><a href="#下载配置PicGo" class="headerlink" title="下载配置PicGo"></a>下载配置PicGo</h3><blockquote><p> 下载地址<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p></blockquote><p>选择对应的版本  </p><ul><li>Mac OS选择.dmg为结尾的下载</li><li>Windows选择.exe为结尾的下载</li></ul><h4 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h4><h5 id="安装gitee-uploader插件"><a href="#安装gitee-uploader插件" class="headerlink" title="安装gitee-uploader插件"></a>安装<strong>gitee-uploader</strong>插件</h5><p><img src="https://gitee.com/executeing/tuchuang/raw/master/20201029151408.png"></p><h5 id="配置-按图配置"><a href="#配置-按图配置" class="headerlink" title="配置(按图配置)"></a>配置(按图配置)</h5><p><img src="https://gitee.com/executeing/tuchuang/raw/master/20201029151546.png"></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>打开主页面上传图片,成功后会复制一个图片链接到剪贴板。可以在图片预览区查看图片。</p><h3 id="📜一些问题"><a href="#📜一些问题" class="headerlink" title="📜一些问题"></a>📜一些问题</h3><blockquote><p>插件安装不上，记得先安装node.js环境</p></blockquote><p><a href="https://nodejs.org/en/download/">点此访问官网</a>，下载系统对应的版本并安装。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Github/Gitee/Coding/免费搭建一个自己的个人博客网站</title>
      <link href="posts/1.html/"/>
      <url>posts/1.html/</url>
      
        <content type="html"><![CDATA[<blockquote><p>&emsp;&emsp;搭建个人博客已经很长时间一段时间，从一开始的<strong>emlog</strong>到<strong>wodpress</strong>最终选用轻量的<strong>typecho</strong></p><p>一步一步走来。</p><p>&emsp;&emsp;今天记录一下一个简单的博客框架<strong>Hexo</strong>,来快速的搭建属于自己的博客系统，然后托管到Pages上。</p></blockquote><h2 id="这是一个华丽的开始🌏"><a href="#这是一个华丽的开始🌏" class="headerlink" title="这是一个华丽的开始🌏"></a>这是一个华丽的开始🌏</h2><p>&emsp;&emsp;<a href="https://hexo.io/zh-cn">Hexo</a>是一个基于<a herf="https://nodejs.org/zh-cn/">node.js</a>的快速,简介且高效的博客框架。<strong>Hexo</strong>使用<a href="https://daringfireball.net/projects/markdown/">Markdown</a> （或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><h4 id="安装node-js环境-Hexo基于Node-js"><a href="#安装node-js环境-Hexo基于Node-js" class="headerlink" title="安装node.js环境: Hexo基于Node.js"></a>安装<a herf="https://nodejs.org/zh-cn/">node.js</a>环境: Hexo基于Node.js</h4><ul><li>下载地址<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></li><li>安装步骤(一般不需要更改(位置可以改成自己想要的安装地址),默认安装即可)</li></ul><h4 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm  -v</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/executeing/tuchuang/raw/master/node.png"></p><h4 id="安装淘宝镜像加速器-（cnpm）"><a href="#安装淘宝镜像加速器-（cnpm）" class="headerlink" title="安装淘宝镜像加速器 （cnpm）"></a><del>安装淘宝镜像加速器 （cnpm）</del></h4><ul><li><p><del><strong>cnpm</strong> (npm和cnpm只是下载的地址不同，npm是从国外下载东西，cnpm是从国内下载东西)</del></p><p><del>`npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></del>`</p></li></ul><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><ul><li><strong>Hexo 官网：</strong> <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></li></ul><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><ol><li><p>Windows:Ctrl+R 输入 cmd  回车 </p></li><li><p>输入<code>npm install hexo-cli -g</code></p></li><li><p>查看版本<code>hexo -v</code></p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/executeing/tuchuang/raw/master/20201026104828.png"></p><h3 id="本地创建Hexo博客"><a href="#本地创建Hexo博客" class="headerlink" title="本地创建Hexo博客"></a>本地创建Hexo博客</h3><ol><li><p>选择一个盘(我这里选择<strong>H盘</strong>)</p></li><li><p>初始化 Hexo（这里需要等待​）</p><p><code>hexo init  hexo</code></p></li><li><p>进入hexo目录</p><p><code>cd hexo</code>  </p></li><li><p>安装 hexo 的依赖包</p><p><code>npm install</code></p></li><li><p>启动 hexo 服务</p><p><code> hexo s</code></p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/executeing/tuchuang/raw/master/20201026111004.png"></p><p><font color='red'> <em>到这里博客就可以访问了</em></font></p><p>** 访问地址为  <a href="http://localhost:4000/">http://localhost:4000/</a></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/executeing/tuchuang/raw/master/20201026111547.png"></p><hr><h2 id="本地已经完成接下来是部署到Github进行托管"><a href="#本地已经完成接下来是部署到Github进行托管" class="headerlink" title="本地已经完成接下来是部署到Github进行托管"></a>本地已经完成接下来是部署到Github进行托管</h2><hr><h3 id="Github-Page"><a href="#Github-Page" class="headerlink" title="Github Page"></a>Github Page</h3><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><ul><li>Github地址<a href="https://github.com/">https://github.com/</a> (注册过程不再这里展示了)</li></ul><h4 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h4><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/executeing/tuchuang/raw/master/20201026112713.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/executeing/tuchuang/raw/master/image-20201026113154327.png"></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul><li>Git(先进的分布式版本控制系统)</li><li>用来将本地项目托管到Github/Gitee/Coding。</li><li>在工作中 Git是必定会用到的</li><li>下载地址<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a>  (官网下载速度会很慢，自行百度下载)</li><li>傻瓜式安装即可</li></ul><h4 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h4><ol><li><p>在 H盘(之前初始化的地方) 右键点击  <strong>Git Bash Here</strong> （命令行也可以）</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;lxxxxdy&quot;  #用户名</span><br><span class="line">git config --global user.email &quot;xxxxx@qq.com&quot;   #你的邮箱</span><br></pre></td></tr></table></figure></li><li><p>生成ssh秘钥</p><p><code>ssh-keygen -t rsa -C &quot;xxxxx@qq.com&quot;   #你的邮箱”</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/executeing/tuchuang/raw/master/20201026150139.png"></p><ul><li>在C盘下找到公钥</li></ul><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/executeing/tuchuang/raw/master/20201026144400.png" style="zoom:50%;" /><ul><li><p>复制其中内容到github中的Key中  如下图（TIitle 随便写）</p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/executeing/tuchuang/raw/master/20201026144056.png"></p></li><li><p>验证是否<strong>SSH</strong>成功(输入后回复yes  类似下图)</p><p><code>ssh -T git@github.com</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/executeing/tuchuang/raw/master/20201026145035.png"></p></li></ul></li></ol><h4 id="使用Git部署到Github"><a href="#使用Git部署到Github" class="headerlink" title="使用Git部署到Github"></a>使用Git部署到Github</h4><ol><li>修改配置文件（链接在上边）</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/executeing/tuchuang/raw/master/20201026115056.png"></p><ol start="2"><li><p>安装部署插件 </p><p><code>npm install hexo-deployer-git --save </code></p><p>成功之后就可以使用 hexo deploy（或 hexo d）将项目部署到远程仓库了</p></li><li><p>部署</p><p><code>hexo g -d </code></p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/executeing/tuchuang/raw/master/20201026145731.png"></p><p>我们访问的域名就是   用户名.github.io</p><p>当然也可以自定义域名！</p><hr><h2 id="结尾📌"><a href="#结尾📌" class="headerlink" title="结尾📌"></a>结尾📌</h2><hr><h3 id="📜一些问题"><a href="#📜一些问题" class="headerlink" title="📜一些问题"></a>📜一些问题</h3><blockquote><p>博客安装成功怎么写文章呢？</p></blockquote><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">新建一篇名为 我的第一个文章 </span><br><span class="line">的文章* hexo new &quot;我的第一个文章&quot;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/executeing/tuchuang/raw/master/20201026150444.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/executeing/tuchuang/raw/master/20201026150651.png"></p><p>完成之后要记得提交  命令 <code>hexo g -d</code></p><blockquote><p>如何更换主题</p></blockquote><p>官网主题：<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><ol><li><p>下载主题  </p></li><li><p>解压到 根目录下的thems文件下！</p></li><li><p>修改根目录下的配置文件 <strong>_config.yml</strong></p><p><code>theme: 这里改为解压的文件名</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/executeing/tuchuang/raw/master/20201026164945.png"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="posts/ckh5w70wt0003ewvaa8g89tzp.html/"/>
      <url>posts/ckh5w70wt0003ewvaa8g89tzp.html/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
